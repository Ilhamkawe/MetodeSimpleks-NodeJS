/* eslint-env node, mocha */
const SimpleSimplex = require('../lib/simple-simplex');
const expect = require('chai').expect;

const firstProblem = {
  objective: {
    a: 5,
    z: 10,
    d: 15,
    x: 20,
    b: 3,
  },
  constraints: [
    {
      namedVector: { a: 2, b: 1, d: 10, x: 20, z: 3 },
      constraint: '<=',
      constant: 100,
    },
    {
      namedVector: { a: 3, b: 5, d: 7, x: 11, z: 13 },
      constraint: '>=',
      constant: 200,
    },
    {
      namedVector: { a: 17, b: 19, d: 21, x: 23, z: 29 },
      constraint: '<=',
      constant: 300,
    },
  ],
  optimizationType: 'max',
};

const secondProblem = {
  objective: {
    x: 60,
    y: 90,
    z: 300,
  },
  constraints: [
    {
      namedVector: { x: 1, y: 1, z: 1 },
      constraint: '<=',
      constant: 600,
    },
    {
      namedVector: { x: 1, y: 3, z: 0 },
      constraint: '<=',
      constant: 600,
    },
    {
      namedVector: { x: 2, y: 0, z: 1 },
      constraint: '<=',
      constant: 900,
    },
  ],
  optimizationType: 'max',
};

const actualProblem = {
  objective: {
    a: 70,
    b: 210,
    c: 140,
  },
  constraints: [
    {
      namedVector: { a: 1, b: 1, c: 1 },
      constraint: '<=',
      constant: 100,
    },
    {
      namedVector: { a: 5, b: 4, c: 4 },
      constraint: '<=',
      constant: 480,
    },
    {
      namedVector: { a: 40, b: 20, c: 30 },
      constraint: '<=',
      constant: 3200,
    },
  ],
  optimizationType: 'max',
};

describe('SimpleSimplex', () => {
  it('should generate tableaus properly', () => {
    const firstSolver = new SimpleSimplex(firstProblem);
    const firstTableau = firstSolver.generateTableau();

    expect(
      firstTableau,
      'first tableau not generated properly'
    ).to.deep.equal([
      [2, 1, 10, 20, 3, 1, 0, 0, 0, 100],
      [-3, -5, -7, -11, -13, 0, 1, 0, 0, -200],
      [17, 19, 21, 23, 29, 0, 0, 1, 0, 300],
      [-5, -3, -15, -20, -10, 0, 0, 0, 1, 0],
    ]);

    const secondSolver = new SimpleSimplex(secondProblem);
    const secondTableau = secondSolver.generateTableau();

    expect(
      secondTableau,
      'second tableau not generated properly'
    ).to.deep.equal([
      [1, 1, 1, 1, 0, 0, 0, 600],
      [1, 3, 0, 0, 1, 0, 0, 600],
      [2, 0, 1, 0, 0, 1, 0, 900],
      [-60, -90, -300, 0, 0, 0, 1, 0],
    ]);
  });

  it('should solve an actual problem', () => {
    const solver = new SimpleSimplex(actualProblem);
    const result = solver.solve({ methodName: 'simplex' });
    const resultProjected = {
      coefficients: result.solution.coefficients,
      optimum: result.solution.optimum,
      isOptimal: result.details.isOptimal,
    };
    expect(
      resultProjected,
      'simplex method result is incorrect'
    ).to.deep.equal({
      coefficients: { a: 0, b: 100, c: 0 },
      optimum: 21000,
      isOptimal: true,
    });
  });
});
