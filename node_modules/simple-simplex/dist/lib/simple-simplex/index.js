var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

const mathjs = require('mathjs');
const simplex = require('./algorithms/simplex');

const {
  mapVector: mapVector,
  assertCoefficientParallelism: assertCoefficientParallelism,
  generateTableauRow: generateTableauRow,
  constraintToPreRow: constraintToPreRow,
  extractNamedSolution: extractNamedSolution
} = require('./simplex-helpers');

module.exports = class SimpleSimplex {
  constructor({
    optimizationType: optimizationType,
    objective: objective,
    constraints: constraints
  }) {
    assertCoefficientParallelism({
      objective: objective,
      constraints: constraints
    });
    this.objective = objective;
    this.constraints = constraints;
    this.optimizationType = optimizationType;
    this.numRows = constraints.length + 1;
    const {
      varNames: varNames,
      indicesToNames: indicesToNames,
      namesToIndices: namesToIndices,
      vectorValues: vectorValues
    } = mapVector(objective);
    this.varNames = varNames;
    this.indicesToNames = indicesToNames;
    this.namesToIndices = namesToIndices;
    this.objectiveVectorValues = vectorValues;
    this.tableau = this.generateTableau();
  }

  generateTableau() {
    if (this.optimizationType !== 'max') throw new Error('not a maximization problem');
    const constraintPreRows = this.constraints.map(constraintToPreRow);
    const constraintTableauRows = constraintPreRows.map((preRow, index) => generateTableauRow(_extends({}, preRow, {
      rowNo: index,
      numRows: this.numRows
    })));
    const objectiveTableauRow = generateTableauRow({
      vectorValues: mathjs.multiply(this.objectiveVectorValues, -1),
      rowNo: this.numRows - 1,
      numRows: this.numRows
    });
    const tableau = [...constraintTableauRows, objectiveTableauRow];
    return tableau;
  }

  solve({
    methodName: methodName
  }) {
    if (methodName !== 'simplex') throw new Error('unrecognized algorithm name');
    const details = simplex({
      tableau: this.tableau
    });
    if (!details.isOptimal) throw new Error('solution not optimal!');
    const solution = extractNamedSolution({
      tableau: details.finalTableau,
      indicesToNames: this.indicesToNames,
      allNames: this.varNames
    });
    return {
      details: details,
      solution: solution
    };
  }
};
