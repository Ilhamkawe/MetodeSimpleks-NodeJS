/* eslint-env node, mocha */
const {
  generateTableauRow: generateTableauRow,
  constraintToPreRow: constraintToPreRow,
  getPivotColumnIndex: getPivotColumnIndex,
  getPivotRowIndex: getPivotRowIndex,
  getPivotCoords: getPivotCoords,
  adjustPivotRow: adjustPivotRow,
  adjustNonPivotRow: adjustNonPivotRow,
  applyPivoting: applyPivoting
} = require('../lib/simple-simplex/simplex-helpers');
const expect = require('chai').expect;

const generateTableauProblem = ({
  vectorValues = [3, 5, 7, 11, 13],
  rowNo = 0,
  constant = 17,
  numRows = 3
} = {}) => ({
  vectorValues: vectorValues,
  rowNo: rowNo,
  constant: constant,
  numRows: numRows
});

const generateConstraint = ({
  namedVector = { a: 5, b: 10, c: 15, d: 20 },
  constraint = '<=',
  constant = 85
} = {}) => ({
  namedVector: namedVector,
  constraint: constraint,
  constant: constant
});

const generateTableau = () => [[1, 2, 3, 4, 5, 6, 1], [9, 13, 11, 12, 13, 13, 1], [15, 19, 17, 18, 19, 19, 1], [0, 3, -1, 4, 3, -10, 7]];

const generateSimpleTableau = () => [[2, 2, 1, 1, 0, 0, 10], [1, 2, 3, 0, 1, 0, 15], [-3, -2, -1, 0, 0, 1, 0]];

describe('SimpleSimplex tableau helpers', () => {
  it('should generate tableau rows properly', () => {
    expect(generateTableauRow(generateTableauProblem()), 'tableau row is not generated properly with row no: 0').to.deep.equal([3, 5, 7, 11, 13, 1, 0, 0, 17]);

    expect(generateTableauRow(generateTableauProblem({
      rowNo: 1
    })), 'tableau row is not generated properly with row no: 1').to.deep.equal([3, 5, 7, 11, 13, 0, 1, 0, 17]);

    expect(generateTableauRow(generateTableauProblem({
      rowNo: 2
    })), 'tableau row is not generated properly with row no: 2').to.deep.equal([3, 5, 7, 11, 13, 0, 0, 1, 17]);
  });

  it('should convert constraints to preRow form', () => {
    expect(constraintToPreRow(generateConstraint()), 'tableau row was not correctly converted into pre-row format').to.deep.equal({
      vectorValues: [5, 10, 15, 20],
      constant: 85
    });

    expect(constraintToPreRow(generateConstraint({
      constraint: '>='
    })), 'tableau row was not correctly converted into pre-row format').to.deep.equal({
      vectorValues: [-5, -10, -15, -20],
      constant: -85
    });
  });
});

describe('Simple simplex pivot helpers', () => {
  it('should return -1 for non-negative last rows', () => {
    const tableau = [[0, 1, 2, 3, 4, 5]];

    expect(getPivotColumnIndex(tableau), 'non negative last row created non -1 solution').to.equal(-1);
  });

  it('should find the pivot column index properly', () => {
    const firstTableau = [[-1, 1, 2, 3, 4, 5]];
    const secondTableau = [[1, -1, 2, 3, 4, 5]];
    const thirdTableau = [[1, 1, 2, 3, 4, -5]];

    expect(getPivotColumnIndex(firstTableau), 'pivot for first tableau was wrong').to.equal(0);

    expect(getPivotColumnIndex(secondTableau), 'pivot for second tableau was wrong').to.equal(1);

    expect(getPivotColumnIndex(thirdTableau), 'pivot for third tableau was wrong').to.equal(5);
  });

  it('should find the pivot row index properly', () => {
    const tableau = generateTableau();
    expect(getPivotRowIndex(tableau), 'pivot row index was wrong').to.equal(2);
  });

  it('should find the pivot coords properly', () => {
    const tableau = generateTableau();
    expect(getPivotCoords(tableau), 'pivot coords were wrong').to.deep.equal({
      rowNo: 2,
      colNo: 5
    });
  });

  it('should adjust pivot row', () => {
    const pivotRow = [2, 4, 6, 8, 10];
    const pivotCoords = { colNo: 0 };
    const adjustedPivotRow = adjustPivotRow({
      pivotRow: pivotRow,
      pivotCoords: pivotCoords
    });
    expect(adjustedPivotRow, 'pivot row is not adjusted properly').to.deep.equal([1, 2, 3, 4, 5]);
  });

  it('should do elementary row operations to pivot rows', () => {
    const pivotRow = [2, 4, 6, 8, 10];
    const nonPivotRow = [3, 4, 5, 6, 7];
    const pivotCoords = { colNo: 0 };
    const adjustedPivotRow = adjustPivotRow({
      pivotRow: pivotRow,
      pivotCoords: pivotCoords
    });
    const adjustedInputRow = adjustNonPivotRow({
      nonPivotRow: nonPivotRow,
      adjustedPivotRow: adjustedPivotRow,
      pivotCoords: pivotCoords
    });
    expect(adjustedInputRow, 'EROs failed to adjust the non pivot row').to.deep.equal([0, -2, -4, -6, -8]);
  });

  it('should pivot properly', () => {
    const tableau = generateSimpleTableau();
    const pivotedTableau = applyPivoting(tableau);
    expect(pivotedTableau, 'pivoting failed').to.deep.equal([[2, 2, 1, 1, 0, 0, 10], [0, 1, 2.5, -0.5, 1, 0, 10], [0, 1, 0.5, 1.5, 0, 1, 15]]);
  });
});
